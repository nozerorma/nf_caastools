#!/usr/bin/env nextflow

/*
#                          _              _
#                         | |            | |
#      ___ __ _  __ _ ___| |_ ___   ___ | |___
#    / __/ _` |/ _` / __| __/ _ \ / _ \| / __|
#   | (_| (_| | (_| \__ \ || (_) | (_) | \__ \
#   \___\__,_|\__,_|___/\__\___/ \___/|_|___/
#
# A Convergent Amino Acid Substitution identification 
# and analysis toolbox
#
# Author:         Fabio Barteri (fabio.barteri@upf.edu)
# Contributors:   Alejandro Valenzuela (alejandro.valenzuela@upf.edu),
#                 Xavier FarrÃ© (xfarrer@igtp.cat),
#                 David de Juan (david.juan@upf.edu),
#                 Miguel Ramon (miguel.ramon@upf.edu) - Nextflow Protocol Elaboration
#
# File: modules.config
#
*/

/*
 * Config file for defining DSL2 per module options and publishing paths
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * ext.args   = Additional arguments appended to command in module.
 * ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
 * ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
 * ext.prefix = File name prefix for output files.
 * ----------------------------------------------------------------------------------------
 */

// Timestamp for traceability of results
def trace_timestamp = new Date().format('yyyyMMdd_HHmmss')

process {

    // DISCOVERY process: Identifies CAAS patterns in the data
    withName: 'DISCOVERY' {
        
        // Define additional arguments
        ext.args = """--patterns ${params.patterns}
        --max_bg_gaps ${params.maxbggaps}
        --max_fg_gaps ${params.maxfggaps}
        --max_gaps ${params.maxgaps}
        --max_gaps_per_position ${params.maxgapsperposition}
        --max_bg_miss ${params.maxbgmiss}
        --max_fg_miss ${params.maxfgmiss}
        --max_miss ${params.maxmiss}"""
        
        // Define publish directory and saving conditions
        publishDir = [
            path: { "${params.outdir}/${trace_timestamp}/discovery" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // RESAMPLE process: Resamples the data based on certain criteria
    withName: 'RESAMPLE' {
        
        // Define additional arguments
        ext.args = "--cycles ${params.cycles}"
        
        // Define publish directory and saving conditions
        publishDir = [
            path: { "${params.outdir}/${trace_timestamp}/resample" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // BOOTSTRAP: repeat the CAAS discovery on a large number of discovery groups.
    
    withName: 'BOOTSTRAP' {
        
        // Define additional arguments
        ext.args = """--patterns ${params.patterns}
        --max_bg_gaps ${params.maxbggaps}
        --max_fg_gaps ${params.maxfggaps}
        --max_gaps ${params.maxgaps}
        --max_gaps_per_position ${params.maxgapsperposition}
        --max_bg_miss ${params.maxbgmiss}
        --max_fg_miss ${params.maxfgmiss}
        --max_miss ${params.maxmiss}"""
        
        // Define publish directory and saving conditions
        publishDir = [
            path: { "${params.outdir}/${trace_timestamp}/bootstrap" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
